{"version":3,"sources":["components/Message/index.js","components/Bar/index.js","components/Clickable/index.js","components/Container/index.js","components/Footer/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Message","state","guess","animating","renderText","_this","prevState","score","_ref","highScore","updatedState","this","props","setState","_this2","react_default","a","createElement","className","onAnimationEnd","Component","Bar","href","components_Message","currentRound","Clickable","aria-label","onClick","handleClick","id","style","backgroundImage","concat","image","shake","Container","children","Footer","alt","src","Header","App","round","choices","shuffleArr","arr","i","length","j","Math","floor","random","temp","repeatGuess","updatedChoices","map","choice","thisClickable","Object","objectSpread","clicked","handleRepeat","handleNew","resetChoices","_this$state","max","newRound","noneClicked","backgroundRepeat","backgroundSize","components_Bar","components_Header","components_Container","clickable","components_Clickable","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7321843.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Message extends Component {\n  // using state for conditional rendering of text animations\n  state = {\n    guess: \"\",\n    animating: false\n  };\n\n  componentDidUpdate({ score, highScore }, prevState) {\n    const updatedState = { animating: true };\n\n    // changing state according to whether last guess was a new or repeat guess\n    if (score === 0 && highScore === 0) {\n      updatedState.guess = \"\";\n    } else if (score === 0 && highScore > 0) {\n      updatedState.guess = \"repeat\";\n    } else {\n      updatedState.guess = \"new\";\n    }\n\n    // setting state to changed state defined above\n    if (score !== this.props.score || this.state.guess !== updatedState.guess) {\n      this.setState(updatedState);\n    }\n  }\n\n  // rendering text according to state to display the appropriate message to the user\n  renderText = () => {\n    switch (this.state.guess) {\n    case \"new\":\n      return \"You chose wisely!\";\n    case \"repeat\":\n      return \"Uh oh! Repeat guess!\";\n    default:\n      return \"Click on an image to begin!\";\n    }\n  };\n\n  render() {\n    return (\n      <li\n        className={this.state.animating ? this.state.guess : \"\"}\n        onAnimationEnd={() => this.setState({ animating: false })}\n      >\n        {/* displaying the message here */}\n        {this.renderText()}\n      </li>\n    );\n  }\n}\n\nexport default Message;\n","import React from \"react\";\nimport Message from \"../Message\";\nimport \"./style.css\";\n\nfunction Bar(props) {\n  return (\n    <nav className=\"bar\">\n      <ul>\n        <li className=\"logo\">\n          <a href=\"/\">React, Recall, Rearrange!</a>\n        </li>\n        {/* passing score info as props to the Message component */}\n        <Message score={props.score} highScore={props.highScore} />\n        <li>\n          {/* displaying current round and score info */}\n          Round {props.currentRound} | Score: {props.score} | High Score: {props.highScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Bar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Clickable(props) {\n  return (\n    <div\n      aria-label=\"clickable\"\n      // passing the App component's handleClick function down to the Clickable component\n      onClick={() => props.handleClick(props.id)}\n      // displaying the associated clickable image\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      // using className to create a conditional shake effect (takes effect iff props.shake is true)\n      className={`clickable${props.shake ? \" shake\" : \"\"}`}\n    />\n  );\n}\n\nexport default Clickable;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  // displaying the clickables as props.children inside a container component\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"bottom\">\n        {/* footer content */}\n        <img alt=\"react\" src=\"assets/images/logo.svg\"/>\n        React, Recall, Rearrange!\n        <img alt=\"react\" src=\"assets/images/logo.svg\"/>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      {/* header content, including title and basic game instructions */}\n      <h1>React, Recall, Rearrange!</h1>\n      <h2>Click on an image to earn a point, but don't click on any image more than once in the same round!</h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Bar, Clickable, Container, Footer, Header } from \"./components\";\nimport choices from \"./choices.json\";\n\nclass App extends Component {\n  state = {\n    // The current round.\n    // Increases by 1 each time the user successfully guesses all the clickables without any repeats.\n    // Resets to 1 if the user clicks on the same clickable for the second time in a given round.\n    round: 1,\n    // The clickable choices imported from choices.json.\n    choices,\n    // The user's current score.\n    // Increases by 1 each time the user successfully guesses a non-repeat clickable.\n    // Resets to 0 if the user clicks on the same clickable for the second time in a given round.\n    score: 0,\n    // The highest score the user has achieved since the last time the page was loaded.\n    highScore: 0\n  }\n\n  componentDidMount() {\n    // If the component successfully mounts, set up the game's initial state: the shuffled array of all choices, none yet clicked.\n    this.setState({ choices: this.shuffleArr(this.state.choices) });\n  }\n\n  // using the Fisher-Yates shuffle algorithm to shuffle the array of clickables\n  // makes it necessary for the user to remember which clickables have already been clicked\n  shuffleArr = arr => {\n    let i = arr.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i--;\n    }\n    return arr;\n  };\n\n  // what to do when a clickable is clicked\n  handleClick = id => {\n    // It's a repeat guess unless ...\n    let repeatGuess = true;\n    const updatedChoices = this.state.choices.map(choice => {\n      const thisClickable = { ...choice };\n      // the corresponding array element stored in the state includes \"clicked: false\".\n      if ((thisClickable.id === id) && (!thisClickable.clicked)) {\n        thisClickable.clicked = true;\n        repeatGuess = false;\n      }\n      return thisClickable;\n    });\n    // calling the appropriate function depending on whether it was a repeat guess\n    repeatGuess\n      ? this.handleRepeat(updatedChoices)\n      : this.handleNew(updatedChoices);\n  };\n\n  // If it was a repeat guess,\n  handleRepeat = choices => {\n    // reset the state apart from the high score (i.e., game over).\n    this.setState({\n      round: 1,\n      choices: this.resetChoices(choices),\n      score: 0\n    });\n  };\n\n  // If it was not a repeat guess,\n  handleNew = choices => {\n    // update the current score and, if equal to the current score, the high score as well.\n    let { score, highScore } = this.state;\n    score += 1;\n    highScore = Math.max(score, highScore);\n\n    // It's a new round unless at least one choice still hasn't been clicked.\n    let newRound = true;\n    choices.map(choice => {\n      if (!choice.clicked) {\n        newRound = false;\n      }\n      return newRound;\n    });\n    \n    // Set the state to incorporate these updates, including setting up a new round if appropriate.\n    this.setState({\n      round: newRound ? this.state.round + 1 : this.state.round,\n      choices: newRound ? this.resetChoices(choices) : this.shuffleArr(choices),\n      score,\n      highScore\n    });\n  };\n\n  // Reset choices to none yet clicked and reshuffle choices.\n  // This function is called whenever there is a repeat guess or a new round.\n  resetChoices = choices => {\n    const noneClicked = choices.map(choice => ({ ...choice, clicked: false }));\n    return this.shuffleArr(noneClicked);\n  };\n\n  render() {\n    return (\n      // setting the page's background\n      <div style={{\n        backgroundImage: \"url(/assets/images/spongebob-floral-background.png)\",\n        backgroundRepeat: \"repeat-x\",\n        backgroundSize: \"cover\"\n      }}>\n        {/* bar displaying game info at the top of the window */}\n        <Bar\n          currentRound={this.state.round}\n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        {/* header displaying the game's title and basic rules */}\n        <Header />\n        {/* container for the clickables */}\n        <Container>\n          {this.state.choices.map(clickable => (\n            // Each clickable gets a unique ID, shake property (triggered on repeat guess), click functionality, and unique image.\n            <Clickable\n              key={clickable.id}\n              id={clickable.id}\n              shake={!this.state.score && this.state.highScore}\n              handleClick={this.handleClick}\n              image={clickable.image}\n            />\n          ))}\n        </Container>\n        {/* footer containing the React logo and the game's title */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\n// exporting the App component so it can be rendered on the page\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}